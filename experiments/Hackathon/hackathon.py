from experiments.Hackathon import config_Hackathon

conf = config_Hackathon.config

from utility import helpers
helpers.doAppends(conf)

from utility import graph
from driver import CetoniDevice_driver, densioVisco_driver
from action import CetoniDevice_action, densioVisco_action
from qmixsdk import qmixbus, qmixpump

if __name__ == "__main__":
    ## Generate the graph and its valvePositionDict
    graph.generateGraph()

    ## Prepare the Cetoni device
    Ps, Vs, Cs = CetoniDevice_driver.cetoni.prepareCetoni()

    ## Get the desired mixing ratio
    assignment = {"A0.0": "Reservoir1", "B0.0": "Reservoir2", "C0.0": "Reservoir3", "D0.0": "Reservoir4"}

    ## Flush the syringes
    for p in Ps.keys():
        CetoniDevice_action.flushSyringe(pumps=Ps, valves=Vs, pump=p, reservoir=assignment[p])

## Mix the sample
CetoniDevice_action.mix(mixRatio=mixingRatio, pumps=Ps, valves=Vs, assignment=assignment)

## Transfer the sample to the device
CetoniDevice_action.provideSample(measurementtype=measurement, sample_node="M1.0", pumps=Ps, valves=Vs)

## Perform the density measurement
densioVisco_action.measure(sampleName=sampleName, method=method)

if densioVisco_action.done(sampleName=sampleName, checkSuccess=False):
    ## Retrieve the data generated by the measurement
    densioVisco_action.retrieveData(sampleName=sampleName, method=method, methodtype="Measurement", savePath="Y:\\extractions")