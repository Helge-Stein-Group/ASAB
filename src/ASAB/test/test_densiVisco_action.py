from ASAB.test.FilesForTests import config_test
conf = config_test.config

from ASAB.configuration import config
cf = config.configASAB

# Imports from ASAB
from ASAB.action import densiVisco_action

# Other imports
from pathlib import Path
from glob import glob
from os import remove

def test_measure():
    # delete all .lims files in the target directory to avoid the tests finding these files and checking those instead of the newly created one
    for f in glob(f'{conf["densiVisco"]["inputFolder"]}\\*.lims'):
        remove(f)
    # define the inputs
    sampleName = 'Test_01'
    method = 'Density_01'
    # write the file, which would trigger a measurement if placed in the correct folder - uses the dummy folder in the test configuration
    densiVisco_action.measure(sampleName=sampleName, method=method)

    # check, if the file is generated
    assert Path(f'{conf["densiVisco"]["inputFolder"]}\\{sampleName}.lims').is_file(), f'The file does not exist in the expected directory.'

    # assemble the content as it is expected
    content_target = f"#V100\n1;{sampleName};;;;{method}"
    # get the actual content of the file
    with open(f'{conf["densiVisco"]["inputFolder"]}\\{sampleName}.lims', 'r') as file:
        content_result = file.read()
    # check, that the actual content matches the expected content
    assert content_result == content_target, f'The content is {content_result} instead of {content_target}.'


def test_check():
    # delete all .lims files in the target directory to avoid the tests finding these files and checking those instead of the newly created one
    for f in glob(f'{conf["densiVisco"]["inputFolder"]}\\*.lims'):
        remove(f)
    # define the inputs
    sampleName = 'Test_02'
    check = 'Check_02'
    method = 'Density_02'
    # write the file, which would trigger a measurement if placed in the correct folder - uses the dummy folder in the test configuration
    densiVisco_action.check(sampleName=sampleName, checktype=check, method=method)

    # check, if the file is generated
    assert Path(f'{conf["densiVisco"]["inputFolder"]}\\{check}.lims').is_file(), f'The file does not exist in the expected directory.'

    # assemble the content as it is expected
    content_target = f"#V200\n1;{sampleName};;;;{method};Type;C (Check);Check Type;{check}"
    # get the actual content of the file
    with open(f'{conf["densiVisco"]["inputFolder"]}\\{check}.lims', 'r') as file:
        content_result = file.read()
    # check, that the actual content matches the expected content
    assert content_result == content_target, f'The content is {content_result} instead of {content_target}.'

def test_retrieveData():
    # delete all .json files in the target directory to avoid the tests finding these files and checking those instead of the newly created one
    for f in glob(f'{conf["test_densiVisco"]["savePath"]}\\*.json'):
        if not ("_test.json" in f) and not ("Pre-measureStockSolution" in f):
            remove(f)

    # get the target data
    with open(conf['test_densiVisco']['rawFile']) as file_raw:
        raw_target = file_raw.read()
    with open(conf['test_densiVisco']['resultFile']) as file_result:
        result_target = file_result.read()

    # output file name
    outFileName = conf['test_densiVisco']['outputFile'].split('\\')[-1].strip('.csv')

    # get the result from the function
    densiVisco_action.retrieveData(sampleName=outFileName.split('_')[0], method=outFileName.split('_')[1], methodtype=outFileName.split('_')[2], savePath=conf['test_densiViscoDriver']['savePath'])

    # load and read the files generated by the function
    with open(f'{conf["test_densiVisco"]["savePath"]}\\{outFileName.split("_")[0]}_raw.json') as file_raw:
        raw_result = file_raw.read()
    with open(f'{conf["test_densiVisco"]["savePath"]}\\{outFileName.split("_")[0]}_result.json') as file_result:
        result_result = file_result.read()

    # compare the results to the targets
    assert raw_result == raw_target, f'The content of the raw file is {raw_result} instead of {raw_target}.'
    assert result_result == result_target, f'The content of the result file is {result_result} instead of {result_target}.'
